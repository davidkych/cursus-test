# .github/workflows/deploy-scheduler.yml
name: Deploy Scheduler

on:
  workflow_run:
    workflows: ["Deploy Infra & Web App"]
    types:
      - completed

permissions:
  id-token: write
  contents: read

env:
  RG:   cursus-test-rg
  APP:  cursus-test-app

jobs:
  deploy_scheduler:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download deploy outputs
        uses: actions/download-artifact@v4
        with:
          name: deploy-outputs
          path: .

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Parse outputs
        run: |
          COSMOS=$(jq -r .cosmos outputs.json)
          SCHED_FUNC=$(jq -r .sched_func outputs.json)
          echo "COSMOS=$COSMOS"     >> $GITHUB_ENV
          echo "SCHED_FUNC=$SCHED_FUNC" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: pip

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Vendor scheduler deps & package ZIP
        shell: bash
        run: |
          set -eo pipefail
          pushd src/scheduler_fapp

          echo "üì¶ Installing Python deps into .python_packages/ ‚Ä¶"
          python -m pip install --upgrade pip
          python -m pip install --no-cache-dir -r requirements.txt \
                                   --target .python_packages/lib/site-packages

          echo "üóú  Creating deployment ZIP ‚Ä¶"
          zip -qr ../../sched.zip . .python_packages
          popd
          echo "üì¶ scheduler zip size: $(du -h sched.zip | cut -f1)"

      - name: ZIP-deploy scheduler Function-App
        shell: bash
        run: |
          set -eo pipefail
          for attempt in 1 2 3; do
            echo "üöÄ ZIP deploy attempt $attempt"
            if az functionapp deployment source config-zip \
                  -g $RG -n $SCHED_FUNC --src sched.zip --timeout 240; then
                echo "‚úÖ scheduler zip deploy succeeded"
                break
            fi
            echo "‚ö†Ô∏è attempt $attempt failed ‚Äì backing off $((attempt*30)) s"
            sleep $((attempt*30))
          done

          status=$(az functionapp show -g $RG -n $SCHED_FUNC --query state -o tsv)
          [[ "$status" == "Running" ]] || { echo "üí• scheduler failed to start"; exit 1; }

          echo "üöÄ scheduler running ‚Äì tailing log 60 s ‚Ä¶"
          timeout 60s az webapp log tail -g $RG -n $SCHED_FUNC | tee sched.log || true

      - name: Verify scheduler health endpoint
        shell: bash
        run: |
          set -eo pipefail
          url="https://$SCHED_FUNC.azurewebsites.net/api/healthz"
          echo "üîç Probing $url ‚Ä¶"

          for attempt in {1..10}; do
            code=$(curl -s -o /tmp/healthz.json -w '%{http_code}' "$url" || true)
            printf "Attempt %d ‚Üí HTTP %s\n" "$attempt" "$code"
            if [ "$code" = "200" ]; then
              echo "‚úÖ Health check passed"
              cat /tmp/healthz.json || true
              exit 0
            fi
            echo "‚åõ Not ready yet ‚Äì waiting 15 s"
            sleep 15
          done

          echo "üí• Scheduler health check failed after 10 attempts"
          exit 1

      - name: Grant Cosmos role (scheduler MSI)
        run: |
          set -eo pipefail
          principalId=$(az webapp identity show -g $RG -n $SCHED_FUNC --query principalId -o tsv)
          roleId=$(az cosmosdb sql role definition list -g $RG --account-name $COSMOS \
                   --query "[?roleName=='Cosmos DB Built-in Data Contributor'].id" -o tsv)
          az cosmosdb sql role assignment create -g $RG --account-name $COSMOS \
            --principal-id $principalId \
            --role-definition-id $roleId \
            --scope "/" || true
          echo "‚úÖ scheduler MSI granted data-plane role"

      - name: Update web-app with scheduler settings
        run: |
          set -eo pipefail
          sched_base="https://$SCHED_FUNC.azurewebsites.net"

          az webapp config appsettings set \
            -g $RG -n $APP --settings \
            SCHEDULER_BASE_URL=$sched_base \
            SCHEDULER_FUNCTION_NAME=$SCHED_FUNC \
            SCHEDULER_MGMT_KEY=""

          echo "üîó web-app now knows scheduler base $sched_base (no key needed)"

      - name: Upload scheduler logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: scheduler-log
          path: sched.log
