# .github/workflows/web-app.yml
name: Web-App Reusable

on:
  workflow_call:
    inputs:
      RG:          { required: true, type: string }
      APP:         { required: true, type: string }
      TIMEOUT:     { required: true, type: number }
      COSMOS:      { required: true, type: string }
      SCHED_FUNC:  { required: true, type: string }
    secrets:
      AZURE_CREDENTIALS: { required: true }
      JWT_SECRET:        { required: true }

jobs:
  deploy-web-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: pip

      # ── Vendor deps (retry + verify) ───────────────────────────────────────
      - name: Vendor deps
        shell: bash
        run: |
          set -eo pipefail
          python -m pip install --upgrade pip

          VENV="src/.python_packages/lib/site-packages"          # ← NEW (Azure-expected path)

          for attempt in 1 2 3; do
            echo "📦 pip install attempt $attempt"
            if python -m pip install --no-cache-dir --progress-bar off \
                 --target "$VENV" \
                 -r src/requirements.txt; then
              break
            fi
            echo "⚠️ pip install failed – retrying in $((attempt*15)) s"
            sleep $((attempt*15))
          done

          export PYTHONPATH="$PWD/$VENV${PYTHONPATH:+:$PYTHONPATH}"   # ← NEW
          python -m pip check
          python - <<'PY'
          import importlib, sys
          for pkg in ("uvicorn", "fastapi", "gunicorn"):
              try:
                  importlib.import_module(pkg)
                  print(f"✅ import {pkg}")
              except ImportError as e:
                  sys.stderr.write(str(e) + "\n")
                  sys.exit(1)
          PY

      # ── Fail-fast checks BEFORE deploying ──────────────────────────────────
      - name: Syntax check (compileall)
        shell: bash
        run: python -m compileall -q src

      - name: Preflight smoke test (import + /healthz)
        shell: bash
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          set -eo pipefail
          # Match Azure’s module layout so imports behave the same
          export PYTHONPATH="$PWD/src/.python_packages/lib/site-packages:$PWD/src"

          # Provide safe defaults so import-time clients don't explode in CI
          export COSMOS_ENDPOINT="${COSMOS_ENDPOINT:-https://localhost:8081}"
          export COSMOS_DB_ENDPOINT="${COSMOS_DB_ENDPOINT:-https://localhost:8081}"
          export AZURE_COSMOS_ENDPOINT="${AZURE_COSMOS_ENDPOINT:-https://localhost:8081}"
          export COSMOS_URI="${COSMOS_URI:-https://localhost:8081}"
          export APP_ENV="${APP_ENV:-ci}"

          python - <<'PY'
          import os, sys, traceback

          # Make stdout/stderr unbuffered for clearer logs
          os.environ.setdefault("WEBSITES_PORT","8000")
          os.environ.setdefault("PYTHONUNBUFFERED","1")
          os.environ.setdefault("JWT_SECRET", os.getenv("JWT_SECRET","test"))

          # Defensive: stub CosmosClient to avoid SDK URL validation during import
          try:
              import types
              import azure.cosmos as _cosmos_mod
              class _DummyCosmosClient:
                  def __init__(self,*a,**k): pass
              _cosmos_mod.CosmosClient = _DummyCosmosClient
          except Exception:
              # If SDK layout changes, ignore; env overrides may already be enough
              pass

          try:
              import main
              from fastapi.testclient import TestClient
              client = TestClient(main.app)
              r = client.get("/healthz")
              assert r.status_code == 200, f"/healthz returned {r.status_code}: {r.text}"
              print("✅ Preflight passed: /healthz OK")
          except Exception:
              print("💥 Preflight failed with exception:\n")
              traceback.print_exc()       # ← file + line number
              sys.exit(1)
          PY

      - uses: azure/login@v1
        with:
          auth-type: SERVICE_PRINCIPAL
          creds:     ${{ secrets.AZURE_CREDENTIALS }}

      # ── MSI → Cosmos role --------------------------------------------------
      - name: Grant Cosmos Data Contributor to Web-App MSI
        env:
          RG:     ${{ inputs.RG }}
          APP:    ${{ inputs.APP }}
          COSMOS: ${{ inputs.COSMOS }}
        run: |
          set -eo pipefail
          principalId=$(az webapp identity show \
              --resource-group "$RG" --name "$APP" --query principalId -o tsv)

          roleId=$(az cosmosdb sql role definition list \
              --resource-group "$RG" --account-name "$COSMOS" \
              --query "[?roleName=='Cosmos DB Built-in Data Contributor'].id" -o tsv)

          az cosmosdb sql role assignment create \
              --resource-group "$RG" --account-name "$COSMOS" \
              --principal-id "$principalId" --role-definition-id "$roleId" --scope "/"

      # ── App settings (no telemetry keys here; Bicep sets them) -------------
      - name: Configure Web-App settings
        shell: bash
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          set -eo pipefail

          cat > appsettings.json <<JSON
          {
            "WEBSITE_RUN_FROM_PACKAGE":               "0",
            "SCM_DO_BUILD_DURING_DEPLOYMENT":         "false",
            "WEBSITES_PORT":                          "8000",
            "PYTHONPATH":                             "/home/site/wwwroot/.python_packages/lib/site-packages",
            "WEBSITES_CONTAINER_START_TIME_LIMIT":    "${{ inputs.TIMEOUT }}",
            "WEBSITES_STARTUP_COMMAND":               "gunicorn --log-level info --preload --worker-class uvicorn.workers.UvicornWorker --workers 2 --bind 0.0.0.0:8000 main:app",
            "WEBSITES_LOG_MESSAGE_LEVEL":             "Verbose",
            "SCM_LOGSTREAM_TIMEOUT":                  "240",
            "PYTHONUNBUFFERED":                       "1",
            "JWT_SECRET":                             "$JWT_SECRET",
            "USERS_CONTAINER":                        "users"
          }
          JSON

          az webapp config appsettings set \
            -g ${{ inputs.RG }} \
            -n ${{ inputs.APP }} \
            --settings @"appsettings.json"

          az webapp config set -g ${{ inputs.RG }} -n ${{ inputs.APP }} --always-on true
          az webapp log config -g ${{ inputs.RG }} -n ${{ inputs.APP }} \
            --application-logging filesystem \
            --detailed-error-messages true \
            --failed-request-tracing true

          az webapp config set -g ${{ inputs.RG }} -n ${{ inputs.APP }} --health-check-path "/healthz"

      # ── Wait for restart after settings change -----------------------------
      - name: Wait for web-app to finish restarting
        shell: bash
        run: |
          set -eo pipefail
          echo "⌛ Waiting for restart …"
          for i in {1..36}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' \
                     "https://${{ inputs.APP }}.azurewebsites.net/healthz" || true)
            [[ "$code" == "200" ]] && { echo "✅ healthy"; exit 0; }
            sleep 5
          done
          echo "⚠ still not healthy after 3 min – continuing"

      # ── ZIP deploy ---------------------------------------------------------
      - name: ZIP-deploy FastAPI web-app
        shell: bash
        run: |
          set -eo pipefail
          cd src && zip -qr ../app.zip . && cd ..
          echo "⏳ initial warm-up 60 s …"; sleep 60

          success=false
          DEPLOY_URL="https://${{ inputs.APP }}.scm.azurewebsites.net/api/deployments/latest"

          for attempt in 1 2; do
            echo "🚀 ZIP-deploy attempt $attempt"
            if az webapp deploy -g ${{ inputs.RG }} -n ${{ inputs.APP }} \
                                --src-path app.zip --type zip --timeout 600; then
              echo "📡 streaming container log …"
              timeout 120s az webapp log tail -g ${{ inputs.RG }} -n ${{ inputs.APP }} | tee live.log || true
              sleep 15

              code=$(curl -s -o /dev/null -w '%{http_code}' \
                       "https://${{ inputs.APP }}.azurewebsites.net/healthz" || true)
              if [[ "$code" == "200" ]]; then
                success=true
                break
              fi
              echo "⚠ unhealthy (HTTP $code) – backing off"
            else
              echo "⚠ ZIP-deploy attempt $attempt failed – investigate at $DEPLOY_URL"
            fi
            sleep $((attempt*45))
          done

          if ! $success; then
            echo "💥 web-app deploy failed – investigate at $DEPLOY_URL"
            exit 1
          fi

      # ── Verify health endpoint (final gate) --------------------------------
      - name: Verify web-app /healthz
        shell: bash
        run: |
          set -eo pipefail
          echo "🔍 Final health probe …"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' \
                     "https://${{ inputs.APP }}.azurewebsites.net/healthz" || true)
            [[ "$code" == "200" ]] && { echo "✅ health check passed"; exit 0; }
            echo "⌛ still HTTP $code – retrying"
            sleep 5
          done
          echo "💥 health check failed after 150 s"
          exit 1

      # ── Pull richer diagnostics if the job fails ---------------------------
      - name: Download App Service logs (if failed)
        if: failure()
        shell: bash
        env:
          RG:  ${{ inputs.RG }}
          APP: ${{ inputs.APP }}
        run: |
          set -euo pipefail
          az webapp log download -g "$RG" -n "$APP" --log-file appservice_logs.zip || true

      - name: Fetch Kudu docker logs (if failed)
        if: failure()
        shell: bash
        env:
          RG:  ${{ inputs.RG }}
          APP: ${{ inputs.APP }}
        run: |
          set -euo pipefail
          USER=$(az webapp deployment list-publishing-credentials -g "$RG" -n "$APP" --query publishingUserName -o tsv)
          PASS=$(az webapp deployment list-publishing-credentials -g "$RG" -n "$APP" --query publishingPassword -o tsv)
          curl -s -u "$USER:$PASS" "https://${APP}.scm.azurewebsites.net/api/logs/docker" -o dockerlog.json || true

      - name: Upload diagnostics (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: appservice-diagnostics
          path: |
            appservice_logs.zip
            dockerlog.json
            live.log

      # ── Upload live log on failure ----------------------------------------
      - if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: webapp-log
          path: live.log
