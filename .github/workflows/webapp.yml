name: Deploy Web-App

on:
  workflow_call:
    inputs:
      rg:       { type: string, required: true }
      location: { type: string, required: true }
      app:      { type: string, required: true }
      cosmos:   { type: string, required: true }
      timeout:  { type: number, required: false, default: 1800 }
    secrets:
      AZURE_CLIENT_ID:      { required: true }
      AZURE_TENANT_ID:      { required: true }
      AZURE_SUBSCRIPTION_ID:{ required: true }

jobs:
  deploy-webapp:
    runs-on: ubuntu-latest
    env:
      RG:       ${{ inputs.rg }}
      LOCATION: ${{ inputs.location }}
      APP:      ${{ inputs.app }}
      COSMOS:   ${{ inputs.cosmos }}
      TIMEOUT:  ${{ inputs.timeout }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: pip

      - name: Vendor deps
        run: |
          pip install --upgrade pip
          pip install --only-binary=:all: --prefer-binary \
                      --no-cache-dir \
                      -r src/requirements.txt \
                      --target src/.python_packages

      - uses: azure/login@v1
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Grant Cosmos ‚ÄúBuilt-in Data Contributor‚Äù role (web-app)
        run: |
          set -eo pipefail
          principalId=$(az webapp identity show -g $RG -n $APP --query principalId -o tsv)
          roleId=$(az cosmosdb sql role definition list -g $RG --account-name $COSMOS \
                   --query "[?roleName=='Cosmos DB Built-in Data Contributor'].id" -o tsv)
          az cosmosdb sql role assignment create -g $RG --account-name $COSMOS \
            --principal-id $principalId --role-definition-id $roleId --scope "/" || true
          echo "‚úÖ web-app MSI granted data-plane role"

      - name: Configure Web-App settings
        run: |
          az webapp config appsettings set -g $RG -n $APP --settings \
            WEBSITE_RUN_FROM_PACKAGE=0 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            WEBSITES_PORT=8000 \
            PYTHONPATH="/home/site/wwwroot:/home/site/wwwroot/.python_packages" \
            WEBSITES_CONTAINER_START_TIME_LIMIT=$TIMEOUT \
            WEBSITES_STARTUP_COMMAND="gunicorn --log-level info --worker-class uvicorn.workers.UvicornWorker --workers 2 --bind 0.0.0.0:8000 main:app" \
            WEBSITES_LOG_MESSAGE_LEVEL=Verbose \
            SCM_LOGSTREAM_TIMEOUT=240
          az webapp config set -g $RG -n $APP --always-on true
          az webapp log config -g $RG -n $APP \
            --application-logging filesystem \
            --detailed-error-messages true \
            --failed-request-tracing true
          echo "‚öôÔ∏è  base app-settings applied"

      - name: ZIP-deploy FastAPI web-app
        shell: bash
        run: |
          set -eo pipefail
          cd src && zip -qr ../app.zip . && cd ..
          echo "‚è≥ initial warm-up 60 s ‚Ä¶"; sleep 60

          success=false
          for attempt in 1 2; do
            echo "üöÄ ZIP-deploy attempt $attempt"
            az webapp deploy -g $RG -n $APP --src-path app.zip --type zip --timeout 200 || true

            echo "üì° streaming container log 90 s ‚Ä¶"
            timeout 90s az webapp log tail -g $RG -n $APP | tee live.log || true
            sleep 10

            code=$(curl -s -o /dev/null -w '%{http_code}' "https://$APP.azurewebsites.net/healthz" || true)
            if [[ "$code" == "200" ]]; then
              echo "‚úÖ healthy"
              success=true
              break
            fi
            echo "‚ö† unhealthy (HTTP $code) ‚Äì backing off"
            sleep $((attempt*45))
          done

          $success || { echo "üí• web-app deploy failed"; exit 1; }

      - name: Restart web-app (force recycle)
        shell: bash
        run: |
          set -eo pipefail
          echo "‚ôªÔ∏è Restarting $APP ‚Ä¶"
          az webapp restart -g $RG -n $APP
          for i in {1..12}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' "https://$APP.azurewebsites.net/healthz" || true)
            [[ "$code" == "200" ]] && { echo "‚úÖ new container ready"; exit 0; }
            sleep 5
          done
          echo "üí• container did not become healthy in time"; exit 1

      - if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: webapp-log
          path: live.log
