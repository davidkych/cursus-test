# .github/workflows/deploy.yml
name: Azure Deployment (Test)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents:  read

jobs:
  # ───────────────────────── change detection ─────────────────────────
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      # raw area changes
      changed_github:    ${{ steps.filter.outputs.github }}
      changed_infra:     ${{ steps.filter.outputs.infra }}
      changed_scheduler: ${{ steps.filter.outputs.scheduler }}
      changed_staticweb: ${{ steps.filter.outputs.staticweb }}
      changed_webapp:    ${{ steps.filter.outputs.webapp }}
      # computed run flags
      run_infra:         ${{ steps.compute.outputs.run_infra }}
      run_scheduler:     ${{ steps.compute.outputs.run_scheduler }}
      run_staticweb:     ${{ steps.compute.outputs.run_staticweb }}
      run_webapp:        ${{ steps.compute.outputs.run_webapp }}
      # single source-of-truth prefix (no repo vars, no env)
      prefix:            ${{ steps.compute.outputs.prefix }}
    steps:
      - uses: actions/checkout@v3

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          list-files: json   # ⟵ expose <filter>_files and <filter>_count
          filters: |
            github:
              - '.github/**'              # constitutional GitHub
            infra:
              - 'infra/**'
            scheduler:
              - 'src/scheduler_fapp/**'
            staticweb:
              - 'frontend/**'
            webapp:
              - 'src/**'
              - '!src/scheduler_fapp/**'  # exclude scheduler from webapp

      - id: compute
        name: Compute run flags and prefix
        shell: bash
        run: |
          set -euo pipefail

          github="${{ steps.filter.outputs.github }}"
          infra="${{ steps.filter.outputs.infra }}"
          scheduler="${{ steps.filter.outputs.scheduler }}"
          staticweb="${{ steps.filter.outputs.staticweb }}"
          webapp="${{ steps.filter.outputs.webapp }}"

          # ── Single source-of-truth for names (no repo vars, no env) ───────
          PREFIX="cursus-test1"

          # ── Decide what to run per your rules ─────────────────────────────
          run_infra="false"
          if [ "$github" = "true" ] || [ "$infra" = "true" ]; then
            run_infra="true"
          fi

          run_scheduler="false"
          if [ "$github" = "true" ] || [ "$infra" = "true" ] || [ "$scheduler" = "true" ]; then
            run_scheduler="true"
          fi

          run_staticweb="false"
          if [ "$github" = "true" ] || [ "$infra" = "true" ] || [ "$staticweb" = "true" ]; then
            run_staticweb="true"
          fi

          run_webapp="false"
          if [ "$github" = "true" ] || [ "$infra" = "true" ] || [ "$webapp" = "true" ]; then
            run_webapp="true"
          fi

          {
            echo "prefix=$PREFIX"
            echo "run_infra=$run_infra"
            echo "run_scheduler=$run_scheduler"
            echo "run_staticweb=$run_staticweb"
            echo "run_webapp=$run_webapp"
          } >> "$GITHUB_OUTPUT"

          echo "➡ changed: github=$github infra=$infra scheduler=$scheduler staticweb=$staticweb webapp=$webapp"
          echo "➡ run:     infra=$run_infra scheduler=$run_scheduler staticweb=$run_staticweb webapp=$run_webapp"
          echo "➡ prefix:  $PREFIX"

      - name: Decision commentary (matched files per filter)
        shell: bash
        run: |
          set -euo pipefail
          summarize() {
            local name="$1"; local verdict="$2"; local files_json="$3"; local count="$4"
            echo "::group::Filter '${name}': verdict=${verdict}, matches=${count}"
            if [ "${count:-0}" != "0" ] && [ -n "${files_json:-}" ]; then
              python3 - <<'PY'
          import os, json, sys
          name = os.environ.get('FNAME')
          files = json.loads(os.environ.get('FFILES','[]') or '[]')
          for f in files[:200]:
              print(f"  - {f}")
          if len(files) > 200:
              print(f"  … and {len(files)-200} more")
          PY
                      else
                        echo "  (no files matched)"
                      fi
                      echo "::endgroup::"
                    }
                    export FNAME=github  FFILES='${{ steps.filter.outputs.github_files }}';    summarize github    '${{ steps.filter.outputs.github }}'    '${{ steps.filter.outputs.github_files }}'    '${{ steps.filter.outputs.github_count }}'
                    export FNAME=infra   FFILES='${{ steps.filter.outputs.infra_files }}';     summarize infra     '${{ steps.filter.outputs.infra }}'     '${{ steps.filter.outputs.infra_files }}'     '${{ steps.filter.outputs.infra_count }}'
                    export FNAME=scheduler FFILES='${{ steps.filter.outputs.scheduler_files }}'; summarize scheduler '${{ steps.filter.outputs.scheduler }}' '${{ steps.filter.outputs.scheduler_files }}' '${{ steps.filter.outputs.scheduler_count }}'
                    export FNAME=staticweb FFILES='${{ steps.filter.outputs.staticweb_files }}'; summarize staticweb '${{ steps.filter.outputs.staticweb }}' '${{ steps.filter.outputs.staticweb_files }}' '${{ steps.filter.outputs.staticweb_count }}'
                    export FNAME=webapp  FFILES='${{ steps.filter.outputs.webapp_files }}';    summarize webapp    '${{ steps.filter.outputs.webapp }}'    '${{ steps.filter.outputs.webapp_files }}'    '${{ steps.filter.outputs.webapp_count }}'

  # ─────────────────────────── infra (conditional) ───────────────────────────
  infra:
    needs: [ changes ]
    if: ${{ needs.changes.outputs.run_infra == 'true' }}
    uses: ./.github/workflows/infra.yml
    with:
      PREFIX:   ${{ needs.changes.outputs.prefix }}
      LOCATION: eastasia
      PLAN_SKU: B1
      TIMEOUT:  1800
    secrets:
      AZURE_CREDENTIALS:     ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # ─────────────────────── resolve names if infra skipped ────────────────────
  resolve:
    name: Resolve resource names (no-infra)
    needs: [ changes ]
    if: ${{ needs.changes.outputs.run_infra != 'true' && (needs.changes.outputs.run_webapp == 'true' || needs.changes.outputs.run_scheduler == 'true' || needs.changes.outputs.run_staticweb == 'true') }}
    runs-on: ubuntu-latest
    outputs:
      rg:          ${{ steps.resolve.outputs.RG }}
      app:         ${{ steps.resolve.outputs.APP }}
      sched_func:  ${{ steps.resolve.outputs.SCHED_FUNC }}
      static_site: ${{ steps.resolve.outputs.STATIC_SITE }}
      cosmos:      ${{ steps.resolve.outputs.COSMOS }}
    steps:
      - uses: actions/checkout@v3

      - uses: azure/login@v1
        with:
          auth-type: SERVICE_PRINCIPAL
          creds:     ${{ secrets.AZURE_CREDENTIALS }}

      - id: resolve
        name: Derive names & discover Cosmos
        uses: azure/CLI@v2
        with:
          inlineScript: |
            set -euo pipefail
            PREFIX="${{ needs.changes.outputs.prefix }}"

            RG="${PREFIX}-rg"
            APP="${PREFIX}-app"
            SCHED_FUNC="${PREFIX}-sched"
            STATIC_SITE="${PREFIX}-web"

            COSMOS="$(az cosmosdb list -g "$RG" --query "[0].name" -o tsv)"
            if [ -z "$COSMOS" ]; then
              echo "No Cosmos DB account found in RG $RG" >&2
              exit 1
            fi

            {
              echo "RG=$RG"
              echo "APP=$APP"
              echo "SCHED_FUNC=$SCHED_FUNC"
              echo "STATIC_SITE=$STATIC_SITE"
              echo "COSMOS=$COSMOS"
            } >> "$GITHUB_OUTPUT"

  # ────────────────────────── web-app (after infra) ──────────────────────────
  web_app_after_infra:
    needs: [ changes, infra ]
    if: ${{ needs.changes.outputs.run_webapp == 'true' && needs.changes.outputs.run_infra == 'true' }}
    uses: ./.github/workflows/web-app.yml
    with:
      RG:         ${{ needs.infra.outputs.rg }}
      APP:        ${{ needs.infra.outputs.app }}
      TIMEOUT:    1800
      COSMOS:     ${{ needs.infra.outputs.cosmos }}
      SCHED_FUNC: ${{ needs.infra.outputs.sched_func }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      JWT_SECRET:        ${{ secrets.JWT_SECRET }}

  # ─────────────────────────── web-app (direct) ──────────────────────────────
  web_app_direct:
    needs: [ changes, resolve ]
    if: ${{ needs.changes.outputs.run_webapp == 'true' && needs.changes.outputs.run_infra != 'true' }}
    uses: ./.github/workflows/web-app.yml
    with:
      RG:         ${{ needs.resolve.outputs.rg }}
      APP:        ${{ needs.resolve.outputs.app }}
      TIMEOUT:    1800
      COSMOS:     ${{ needs.resolve.outputs.cosmos }}
      SCHED_FUNC: ${{ needs.resolve.outputs.sched_func }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      JWT_SECRET:        ${{ secrets.JWT_SECRET }}

  # ───────────────────────── scheduler (after infra) ─────────────────────────
  scheduler_after_infra:
    needs: [ changes, infra ]
    if: ${{ needs.changes.outputs.run_scheduler == 'true' && needs.changes.outputs.run_infra == 'true' }}
    uses: ./.github/workflows/scheduler.yml
    with:
      RG:         ${{ needs.infra.outputs.rg }}
      APP:        ${{ needs.infra.outputs.app }}
      SCHED_FUNC: ${{ needs.infra.outputs.sched_func }}
      COSMOS:     ${{ needs.infra.outputs.cosmos }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  # ─────────────────────────── scheduler (direct) ────────────────────────────
  scheduler_direct:
    needs: [ changes, resolve ]
    if: ${{ needs.changes.outputs.run_scheduler == 'true' && needs.changes.outputs.run_infra != 'true' }}
    uses: ./.github/workflows/scheduler.yml
    with:
      RG:         ${{ needs.resolve.outputs.rg }}
      APP:        ${{ needs.resolve.outputs.app }}
      SCHED_FUNC: ${{ needs.resolve.outputs.sched_func }}
      COSMOS:     ${{ needs.resolve.outputs.cosmos }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  # ───────────────────────── static-web (after infra) ────────────────────────
  static_web_after_infra:
    needs: [ changes, infra ]
    if: ${{ needs.changes.outputs.run_staticweb == 'true' && needs.changes.outputs.run_infra == 'true' }}
    uses: ./.github/workflows/static-web.yml
    with:
      RG:               ${{ needs.infra.outputs.rg }}
      STATIC_SITE_NAME: ${{ needs.infra.outputs.static_site }}
      APP:              ${{ needs.infra.outputs.app }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  # ─────────────────────────── static-web (direct) ───────────────────────────
  static_web_direct:
    needs: [ changes, resolve ]
    if: ${{ needs.changes.outputs.run_staticweb == 'true' && needs.changes.outputs.run_infra != 'true' }}
    uses: ./.github/workflows/static-web.yml
    with:
      RG:               ${{ needs.resolve.outputs.rg }}
      STATIC_SITE_NAME: ${{ needs.resolve.outputs.static_site }}
      APP:              ${{ needs.resolve.outputs.app }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
