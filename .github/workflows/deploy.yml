# ── .github/workflows/deploy.yml ─────────────────────────────────────
name: Azure Deployment (Test)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

# ── test-only resource names ─────────────────────────────────────────
env:
  RG:          cursus-test-rg          # test Resource Group
  LOCATION:    eastasia
  APP:         cursus-test-app         # test Web-App
  PLAN_SKU:    B1                      # dev tier; bump if needed
  TIMEOUT:     1800                    # ≤30 min (App Service max)

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1 ▸ checkout & toolchain -----------------------------------------------
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        cache: pip

    # 2 ▸ vendor deps (binary wheels only – avoids local GLIBC links) ---------
    - name: Vendor deps
      run: |
        pip install --upgrade pip
        pip install --only-binary=:all: --prefer-binary \
                    --no-cache-dir -r src/requirements.txt --target src/

    # 3 ▸ Azure login ---------------------------------------------------------
    - uses: azure/login@v1
      with:
        client-id:       ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # 4 ▸ ensure the RG exists (idempotent) -----------------------------------
    - name: Ensure Resource Group
      shell: bash
      run: |
        set -e
        az group create --name "$RG" --location "$LOCATION" --output none
        echo "✅ Resource group '$RG' is ready."

    # 5 ▸ provision infra & capture outputs -----------------------------------
    - name: Provision infra (Bicep)
      id: infra
      shell: bash
      run: |
        set -eo pipefail
        DEPLOY_NAME="gh-${{ github.run_id }}"
        echo "🚀 running az deployment group create …"
        az deployment group create \
          --name "$DEPLOY_NAME" \
          --resource-group "$RG" \
          --template-file infra/main.bicep \
          --parameters planSkuName=$PLAN_SKU timeout=$TIMEOUT

        echo "📄 deployment outputs ↓"
        az deployment group show -g "$RG" -n "$DEPLOY_NAME"

        COSMOS=$(az deployment group show \
                   -g "$RG" -n "$DEPLOY_NAME" \
                   --query "properties.outputs.cosmosAccountName.value" -o tsv)

        if [[ -z "$COSMOS" ]]; then
          echo "❌ COSMOS account name not found in deployment outputs."
          exit 1
        fi

        echo "COSMOS=$COSMOS"           >> "$GITHUB_ENV"
        echo "DEPLOY_NAME=$DEPLOY_NAME" >> "$GITHUB_ENV"

    # 6 ▸ grant **data-plane** role to the Web-App MSI ------------------------
    - name: Grant Cosmos “Built-in Data Contributor” role
      shell: bash
      run: |
        set -eo pipefail
        principalId=$(az webapp identity show -g "$RG" -n "$APP" --query principalId -o tsv)
        roleId=$(az cosmosdb sql role definition list -g "$RG" --account-name "$COSMOS" \
                  --query "[?roleName=='Cosmos DB Built-in Data Contributor'].id" -o tsv)

        az cosmosdb sql role assignment create -g "$RG" --account-name "$COSMOS" \
          --principal-id "$principalId" \
          --role-definition-id "$roleId" \
          --scope "/" || true

    # 7 ▸ base app-settings ----------------------------------------------------
    - name: Configure App Service
      shell: bash
      run: |
        set -eo pipefail
        az webapp config appsettings set -g "$RG" -n "$APP" --settings \
          WEBSITE_RUN_FROM_PACKAGE=0 \
          SCM_DO_BUILD_DURING_DEPLOYMENT=false \
          WEBSITES_PORT=8000 \
          PYTHONPATH=/home/site/wwwroot \
          WEBSITES_CONTAINER_START_TIME_LIMIT=$TIMEOUT \
          WEBSITES_STARTUP_COMMAND="gunicorn --log-level info --worker-class uvicorn.workers.UvicornWorker --workers 2 --bind 0.0.0.0:8000 main:app" \
          WEBSITES_LOG_MESSAGE_LEVEL=Verbose \
          SCM_LOGSTREAM_TIMEOUT=240

        az webapp config set -g "$RG" -n "$APP" --always-on true
        az webapp log  config -g "$RG" -n "$APP" \
          --application-logging filesystem \
          --detailed-error-messages true \
          --failed-request-tracing true

    # 8 ▸ ZIP-deploy with health checks ---------------------------------------
    - name: ZIP-deploy with health checks
      shell: bash
      run: |
        set -eo pipefail
        cd src && zip -qr ../app.zip . && cd ..
        echo "⏳ initial warm-up 60 s …"; sleep 60

        for attempt in 1 2; do
          echo "🚀 ZIP-deploy attempt $attempt"
          az webapp deploy -g "$RG" -n "$APP" --src-path app.zip --type zip --timeout 200 || true

          echo "📡 streaming container log 90 s …"
          timeout 90s az webapp log tail -g "$RG" -n "$APP" | tee live.log || true
          sleep 10

          code=$(curl -s -o /dev/null -w '%{http_code}' \
                 "https://$APP.azurewebsites.net/healthz" || true)
          if [[ "$code" == "200" ]]; then
            echo "✅ healthy"
            exit 0
          fi

          echo "⚠ unhealthy (HTTP $code) – backing off"
          sleep $((attempt*45))
        done

        echo "💥 deploy failed after 3 attempts"
        exit 1

    # 9 ▸ save logs on failure -------------------------------------------------
    - if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: docker-log
        path: live.log
